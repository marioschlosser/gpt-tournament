// set the memoized core strength of each team, regardless of match played
var strengthCore = mem(function (team) {
  return Math.max(gaussian({mu: 2.0, sigma: 1.0}), 0.001);
});

// set the memoized strength of each team for a specific match index, modifying the core strength
// we do this because we want to have match-specific team strength, so a different strength for a team's match 1, 2, 3 etc.
var strengthMatch = mem(function (team, match) {
  return team === 'none' ?
    0 :
    Math.max(strengthCore(team) + gaussian({mu: 0.5, sigma: 0.2}),0.001);
});

// to evaluate the strength of a team vector, get the match strength of the team represented by the vector
var teamStrength = function (teamVector, match) {
  return sum(
    map(function (x) { return strengthMatch(x, match); }, teamVector)
  );
}

// calculate the goals each team scores in a specific match, depending on each team's strength
var scoreMatch = function (team1Strength, team2Strength) {
  var team1Goals = poisson({mu: team1Strength});
  var team2Goals = poisson({mu: team2Strength});
  
  return [team1Goals, team2Goals];
}

// calculate which team wins a group match, winning/drawing teams get points in their position in the vector
var playMatch = function (teamVector1, teamVector2, match1, match2) {
  var team1Strength = Math.min(Math.max(teamStrength(teamVector1, match1),0),10);
  var team2Strength = Math.min(Math.max(teamStrength(teamVector2, match2),0),10);
  
  // score the match
  var goals = scoreMatch(team1Strength, team2Strength);
  var team1Goals = goals[0];
  var team2Goals = goals[1];

  // helper function to figure out where in the team's vector we store the team's scores
  // e.g., ['ger','none','none','none'] => [3,0,0,0] if Germany wins
  var scoreMap = function(strength, points) {
    return map(function (x) { return x > 0 ? points : 0; }, strength);
  }
  
  var team1Index = map(function (y) { return strengthMatch(y, 1); }, teamVector1);
  var team2Index = map(function (y) { return strengthMatch(y, 1); }, teamVector2);

  // allocate the right amount of scores depending on match outcome
  if (team1Goals === team2Goals) {
    // draw: 1 point for each team (create each team score vector, then add vectors)
    return map2(
      function (a, b) { return a + b; },
      scoreMap(team1Index, 1),
      scoreMap(team2Index, 1)
    );
  } else if (team1Goals > team2Goals) {
    // win: 3 points for winning team
    return scoreMap(team1Index, 3);
  } else {
    return scoreMap(team2Index, 3);
  }
}

// combine one element pair-wise with all elements in list
var combineElementWithList = function(element, lst) {
  return map(function (x) { return [element, x]; }, lst);
}

// create team vector for all teams in list, and return list of team vectors, with each team on its own position in the vector
// e.g., [ger,fra] => [['ger','none',],['none','fra']]
var createTeamVectors = function(teams) {
  var createNones = function(x) { mapN(function() { return "none"; }, x); };
  var createVector = function(x,y) { return createNones(y).concat(x).concat(createNones(teams.length - y - 1)); };
  return map2(function(x,y) {return createVector(x,y); }, teams, _.range(0, teams.length));
}

// creates list of all matches in the group stage of a tournament: all teams against each other, once
var createTournament = function(teams) {
  return teams.length === 2 ?
    [[teams[0], teams[1]]] :
    combineElementWithList(teams[0], _.tail(teams)).concat(
      createTournament(_.tail(teams))
    );
}

// create a triangle: all numbers from n to m, once; triangle(1,4) = [[1,1], [2,1], [3,1], [2,2], [3,2], [3,3]]
var triangle = function(n, m) {
  return n === m - 1 ?
    [[n, m - 1]] :
    map(function (x) { return [x, n]; }, _.range(n, m)).concat(triangle(n + 1, m))
}

// combines the triangle of matches with the triangle of match indexes (first match is 1)
// we do this to count each team's match index (match 1, 2, 3 etc.)
var combineWithIndex = function(matches, groupSize) {
  return zip(matches, triangle(1, groupSize));
}

// create all matches in a given group of teams, play them, accumulate the scores
// returns ranked list of teams (or rather, team vectors), each with the points they've accumulated
var playLeague = function(teams) {
  // calculate the results from all matches
  var results = 
      map(
        // here is the match play function
        function (x) {
          return playMatch(_.head(_.head(x)), _.last(_.head(x)), _.head(_.last(x)), _.last(_.last(x)));
        },
        // here we create the full list of matches
        combineWithIndex(createTournament(teams), teams.length));

  // accumulate scores and merge in team names
  var teamsWithScores = zip(
    teams,
    reduce(
      // add up the points in each team's match vector
      function(x,y) { return map2(function(i,j) { return i + j; }, x, y); },
      // start with 0 points for all teams
      repeat(teams.length, function() {return 0;}),
      // go through the list of matches and play all of them
      results
    )
  );
  
  // return sorted scores
  return sort(teamsWithScores, gt, function(x) { return _.last(x); });
}

// in a list of lists, reverses every other list
var reverseEveryOther = function(items) {
  return mapIndexed(function(x,y) { x%2 == 0 ? y : _.reverse(y); }, items);
}

// function to score k.o. matches (only one winner)
var playMatchKO = function(teamVector1, teamVector2) {
  var team1Strength = Math.min(Math.max(teamStrength(teamVector1, 0),0),10);
  var team2Strength = Math.min(Math.max(teamStrength(teamVector2, 0),0),10);
  
  var goals = scoreMatch(team1Strength, team2Strength);
  var team1Goals = goals[0];
  var team2Goals = goals[1];

  return team1Goals > team2Goals ? teamVector1 : (team2Goals > team1Goals ? teamVector2 : (flip() ? teamVector1 : teamVector2));
}

// play k.o. (elimination) round in a tournament
var playKO = function(teams) {
  // check if we are down to two teams
  return teams.length === 2 ?
    // play between the two teams, recursion is over
    playMatchKO(teams[0], teams[1], 1, 1) :
    // split list in half, play elimination rounds on each sub-list, then let the winners play
    playMatchKO(playKO(teams.slice(0, teams.length / 2)), playKO(teams.slice(teams.length / 2, teams.length)));
}

// extracts the team from a team vector
var teamFromVector = function(vector) {
  return reduce(function(x,y) { x == 'none' ? y : y.concat(x); }, '', vector);
}

// set up the groups for the tournament
var group_a = ['Qatar','Ecuador','Senegal','Netherlands'];
var group_b = ['England','Iran','USA','Wales'];
var group_c = ['Argentina','Saudi Arabia','Mexico','Poland'];
var group_d = ['France','Australia','Denmark','Tunisia'];
var group_e = ['Spain','Costa Rica','Germany','Japan'];
var group_f = ['Belgium','Canada','Morocco','Croatia'];
var group_g = ['Brazil','Serbia','Switzerland','Cameroon'];
var group_h = ['Portugal','Ghana','Uruguay','South Korea'];

// list of all the groups
var groups = [group_a, group_b, group_c, group_d, group_e, group_f, group_g, group_h];

// set up team vectors for all groups
var groupVectors = map(function (x) { return createTeamVectors(x); }, groups);

var cup = function () {
  // play all groups in the tournament
  var groupScores = map(function (x) { return playLeague(x); }, groupVectors);

  // sort out top winners in each group
  var groupWinners = map(function (x) { return x.slice(0,2); }, groupScores);

  // group firsts play against group seconds, so reverse every other group
  var teamsKO = map(function(x) { return x[0]; }, _.flatten(reverseEveryOther(groupWinners)));

  // play elimination rounds
  var winner = playKO(teamsKO);

  condition(strengthCore('Germany') >= 3);
  // watch: winning team
  return teamFromVector(winner);
  
  // watch: core strength of one team
  //condition(teamFromVector(winner) == 'Germany');
  //condition(strengthCore('Germany') > strengthCore('France'));
  //return strengthCore('Germany');
  return {
    Germany: strengthCore('Germany'),
    France: strengthCore('France')
  };

};

var dist = Infer({method: 'MCMC', kernel: 'MH', samples: 10000}, function() { return cup(); });
viz.auto(dist);
